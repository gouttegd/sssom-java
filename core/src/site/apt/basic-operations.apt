Basic library operations

* Reading mappings

  Currently, the only supported format to read mappings from is the
  {{{https://mapping-commons.github.io/sssom/spec/#tsv}TSV format}}.
  Both the “internal metadata” variant (where the metadata are included
  directly within the TSV file, as a commented header) and the
  ”external” variant (where the metadata are in a distinct file) are
  supported.
  
  Use the {{{./apidocs/org/incenp/obofoundry/sssom/TSVReader.html}TSVReader}}
  class to read a mapping set from a TSV file:
  
+-----------------------------------------------------------------------
import org.incenp.obofoundry.sssom.TSVReader;
import org.incenp.obofoundry.sssom.SSSOMFormatException;
import org.incenp.obofoundry.sssom.model.MappingSet;

try {
    TSVReader reader = new TSVReader("my-mappings.sssom.tsv");
    MappingSet ms = reader.read();
} catch (IOException ioe) {
    // A non-SSSOM I/O error occured
} catch (SSSOMFormatException sfe) {
    // Invalid SSSOM data
}
+-----------------------------------------------------------------------

  If a metadata header is not found in the specified file, the reader
  will automatically look for a file with the same name as the TSV file
  but with a <<<yml>>> extension, and read the metadata from that file.
  If no such file exists, the reader will throw a
  {{{./apidocs/org/incenp/obofoundry/sssom/SSSOMFormatException.html}SSSOMFormatException}}.
  
  Use the two-arguments variant of the constructor to explicitly specify
  the name of an external metadata file:
  
+-----------------------------------------------------------------------
TSVReader reader = new TSVReader("my-mappings.sssom.tsv", "my-meta.yml");
+-----------------------------------------------------------------------

  Sometimes it may be useful to read <only> the metadata, not the
  mappings themselves. There are two ways to do so: either by setting
  the first argument to the TSVReader constructor to <<<null>>>, or by
  calling <<<reader.read(true)>>> instead of <<<reader.read()>>> (the
  second option is the only possible one if the metadata to read are
  embedded in the same file as the mappings themselves).

  When reading, all short identifiers (aka ”CURIEs”) in the file,
  whether in the metadata or in the mappings themselves, are
  systematically expanded into their corresponding full form according
  to the “CURIE map” found in the metadata (and the built-in prefixes
  defined in the SSSOM specification). That is, the client code has
  <only> access to the expanded, full-length identifiers. The fact that
  the identifiers may have been stored in the file under a shortened
  form is considered a serialisation detail that the client code needs
  not know about.
  
  The parser automatically propagates metadata from the mapping set down
  to the individual mappings. Of note, this propagation is currently
  only partially imeplemented, since the details of which metadata slots
  should be propagated and how that propagation should happen exactly
  have not been fully ironed out yet by the authors of the SSSOM
  specification.
  
  The parser has a liberal behaviour, in that: a) slots that it does not
  recognise are silently ignored and do not cause a parsing failure; b)
  it aims to deal gracefully with obsolete fields, converting them to
  their newer equivalents whenever possible. The second point in
  particular means that the parser should always be able to read a file
  regardless of which version of the specification the file is
  conformant to.
  
  
* Writing mappings

  Again, only the TSV format is supported. Contrary to reading, only the
  <<internal>> metadata variant is supported, it is not currently
  possible to write the metadata to a separate file.
  
  Use the {{{./apidocs/org/incenp/obofoundry/sssom/TSVWriter.html}TSVWriter}}
  class to write a mapping set to a file:
  
+-----------------------------------------------------------------------
import org.incenp.obofoundry.sssom.TSVWriter;
import org.incenp.obofoundry.sssom.model.MappingSet;

MappingSet ms = new MappingSet();
// Fill the mapping set...
try {
    TSVWriter writer = new TSVWriter("my-new-mappings.sssom.tsv");
    writer.write(ms);
} catch (IOException ioe) {
    // A non-SSSOM I/O error occured
}
+-----------------------------------------------------------------------

  When writing, the CURIE map of the mapping set will be used to try
  shortening all identifiers. If a given identifier cannot be shortened,
  it will be written under its full-length form. The built-in prefixes
  defined in the SSSOM specification are always used even if they are
  not explicitly listed in the CURIE map.
  
  Some metadata slots are automatically “condensed” by the writer: if
  all the mappings in the set have the same value for a given slot, the
  value is written once in the mapping set metadata instead of being
  written for all mappings. This ”condensation” is the opposite
  operation of the “propagation” that happens upon parsing. As for
  propagation, it is only partially implemented as this feature is not
  fully specified yet.
  
* Manipulating the mapping set and the mappings

  As hinted in the examples above, a mapping set is represented by the
  {{{./apidocs/org/incenp/obofoundry/sssom/model/MappingSet.html}MappingSet}}
  class. That class has read/write accessors for all metadata slots
  defined in the SSSOM schema. When obtaining a mapping set from a TSV
  file, any slot not explicitly set in the file will be set to
  <<<null>>>.
  
  Get the individual mappings of a mapping set with
  <<<MappingSet.getMappings()>>>. An individual mapping is represented
  by the {{{./apidocs/org/incenp/obofoundry/sssom/model/Mapping.html}Mapping}}
  class. Again, that class has read/write accessors for all
  mapping-level metadata slot defined in the SSSOM schema.
  
  To create a new mapping from scratch, either call the default
  constructor of the <<<Mapping>>> class and then set the various slots
  by calling the appropriate “setter” methods:
  
+-----------------------------------------------------------------------
Mapping mapping = new Mapping();
mapping.setSubjectId("http://example.org/EX_0001");
mapping.setPredicateId("http://www.w3.org/2004/02/skos/core#exactMatch");
mapping.setObjectId("http://example.org/EX_9999");
mapping.setMappingJustification("https://w3id.org/semapv/vocab/LexicalMatching");
+-----------------------------------------------------------------------

  or use the static <<<builder()>>> method as follows:
  
+-----------------------------------------------------------------------
Mapping mapping = Mapping.builder()
                         .subjectId("http://example.org/EX_0001")
                         .predicateId("http://www.w3.org/2004/02/skos/core#exactMatch")
                         .objectId("http://example.org/EX_9999")
                         .mappingJustification("https://w3id.org/semapv/vocab/LexicalMatching")
                         .build();
+-----------------------------------------------------------------------

  To create a new mapping from a pre-existing mapping, you can use the
  <<<toBuilder()>>> method to obtain a builder object initialised with
  all the current metadata of a given mapping. You can then use the
  builder methods to change the desired slots before building the new
  mapping. For example, to create a new mapping from the one above but
  with a different mapping predicate:
  
+-----------------------------------------------------------------------
Mapping mapping2 = mapping.toBuilder()
                          .predicateId("http://www.w3.org/2004/02/skos/core#narrowMatch")
                          .build();
+-----------------------------------------------------------------------

* Visiting the slots of a mapping or a mapping set

  A common need when manipulating mapping is to apply an operation on
  all <slots> (in the LinkML sense; basically, the attributes, or the
  fields) of the <<<Mapping>>> or <<<MappingSet>>> classes (for example
  for serialising or deserialising).
  
  Since there are many such slots, the library provides a pseudo-visitor
  pattern to make it somewhat less cumbersome to “visit” all slots in a
  SSSOM object.
  
  To use that pattern, you must first create an implementation of the
  {{{./apidocs/org/incenp/obofoundry/sssom/SlotVisitor.html}SlotVisitor}}
  interface. That interface is generic and has two type parameters: the
  type of objects whose slots you want to visit (either <<<Mapping>>> or
  <<<MappingSet>>>), and the type of objects your visitor should return
  after visiting a slot (may be <<<Void>>> if your visitor does not need
  to return anything). The interface must implement a <<<visit()>>>
  method for each possible type of slot (String-typed slot, Date-typed
  slots, Double-typed slot, etc.).
  
  Then, you must obtain a
  {{{./apidocs/org/incenp/obofoundry/sssom/SlotHelper.html}SlotHelper}}
  object using one of the static methods on that class (either
  <<<getMappingHelper()>>> or <<<getMappingSetHelper()>>>, depending on
  whether you want to visit the slots of a mapping or of a mapping set),
  and simply call the <<<visitSlots()>>> method on that object.

* Other manipulations on mappings

  To <invert> a mapping (switching the subject and the object), use the
  <<<invert()>>> static method in
  {{{./apidocs/org/incenp/obofoundry/sssom/model/CommonPredicate.html}CommonPredicate}}:
  
+-----------------------------------------------------------------------
import org.incenp.obofoundry.sssom.model.CommonPredicate;

Mapping inverted = CommonPredicate.invert(mapping);
+-----------------------------------------------------------------------

  The method will return a new mapping with inverted values, or
  <<<null>>> if the mapping cannot be inverted (a mapping can only be
  inverted if its predicate is invertible or if it has an associated
  reverse predicate). Note that for now at least, the list of
  invertible predicates is built-in and not modifiable, client code
  cannot add its own predicates. This may change in the future.
  
  To compute the <cardinality> of mappings in a set, use the
  <<<inferCardinality()>>> static method in
  {{{./apidocs/org/incenp/obofoundry/sssom/model/MappingCardinality.html}MappingCardinality}}:
  
+-----------------------------------------------------------------------
import org.incenp.obofoundry.sssom.model.MappingCardinality;

MappingSet mappingSet = ...;
MappingCardinality.inferCardinality(mappingSet.getMappings());
+-----------------------------------------------------------------------

  This will replace any previously set value for the mapping cardinality
  (e.g. original values from the SSSOM file from which the mapping set
  was read) for each mapping.
