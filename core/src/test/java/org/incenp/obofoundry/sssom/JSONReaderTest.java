/*
 * SSSOM-Java - SSSOM library for Java
 * Copyright Â© 2024 Damien Goutte-Gattat
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the Gnu General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package org.incenp.obofoundry.sssom;

import java.io.IOException;
import java.time.LocalDate;

import org.incenp.obofoundry.sssom.model.EntityType;
import org.incenp.obofoundry.sssom.model.Mapping;
import org.incenp.obofoundry.sssom.model.MappingSet;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class JSONReaderTest {

    /*
     * Check that we can read a small SSSOM/JSON file and get all the slots
     * correctly.
     */
    @Test
    void testSimpleRead() throws IOException, SSSOMFormatException {
        JSONReader reader = new JSONReader("src/test/resources/sets/exo2c.sssom.json");
        MappingSet ms = reader.read();

        Assertions.assertNotNull(ms);

        Assertions.assertNotNull(ms.getCreatorId());
        Assertions.assertEquals(2, ms.getCreatorId().size());
        Assertions.assertEquals("https://example.org/people/0000-0000-0001-1234", ms.getCreatorId().get(0));
        Assertions.assertEquals("https://example.com/people/0000-0000-0002-5678", ms.getCreatorId().get(1));
        Assertions.assertEquals("O2C set", ms.getMappingSetTitle());
        Assertions.assertEquals(LocalDate.of(2023, 9, 13), ms.getPublicationDate());

        Assertions.assertNotNull(ms.getMappings());
        Assertions.assertEquals(8, ms.getMappings().size());

        Mapping mapping = ms.getMappings().get(0);
        Assertions.assertEquals("https://example.org/entities/0001", mapping.getSubjectId());
        Assertions.assertEquals("alice", mapping.getSubjectLabel());
        Assertions.assertEquals("http://www.w3.org/2004/02/skos/core#closeMatch", mapping.getPredicateId());
        Assertions.assertEquals("https://example.com/entities/0011", mapping.getObjectId());
        Assertions.assertEquals("https://w3id.org/semapv/vocab/ManualMappingCuration",
                mapping.getMappingJustification());
    }

    /*
     * Likewise, but with an input file containing shortened IRIs.
     */
    @Test
    void testReadInputWithShortenedIRIs() throws IOException, SSSOMFormatException {
        JSONReader reader = new JSONReader("src/test/resources/sets/exo2c-short-iris.sssom.json");
        MappingSet ms = reader.read();

        Assertions.assertNotNull(ms.getCurieMap());
        Assertions.assertEquals("https://example.org/entities/", ms.getCurieMap().get("ORGENT"));
        Assertions.assertEquals("https://example.com/entities/", ms.getCurieMap().get("COMENT"));
        Assertions.assertEquals("https://example.org/people/", ms.getCurieMap().get("ORGPID"));
        Assertions.assertEquals("https://example.com/people/", ms.getCurieMap().get("COMPID"));

        Assertions.assertEquals("https://example.org/people/0000-0000-0001-1234", ms.getCreatorId().get(0));

        Mapping mapping = ms.getMappings().get(0);

        Assertions.assertEquals("https://example.org/entities/0001", mapping.getSubjectId());
        Assertions.assertEquals("http://www.w3.org/2004/02/skos/core#closeMatch", mapping.getPredicateId());
        Assertions.assertEquals("https://example.com/entities/0011", mapping.getObjectId());
        Assertions.assertEquals("https://w3id.org/semapv/vocab/ManualMappingCuration",
                mapping.getMappingJustification());
    }

    /*
     * Likewise, but from a file generated by SSSOM-Py, with the curie map in the
     * "@context" key.
     */
    @Test
    void testReadSSSOMPyOutput() throws IOException, SSSOMFormatException {
        JSONReader reader = new JSONReader("src/test/resources/sets/exo2c-from-sssompy.sssom.json");
        MappingSet ms = reader.read();

        Assertions.assertEquals("https://example.org/entities/", ms.getCurieMap().get("ORGENT"));
        Assertions.assertEquals("https://example.com/entities/", ms.getCurieMap().get("COMENT"));
        Assertions.assertEquals("https://example.org/people/", ms.getCurieMap().get("ORGPID"));
        Assertions.assertEquals("https://example.com/people/", ms.getCurieMap().get("COMPID"));

        Assertions.assertEquals(2, ms.getCreatorId().size());
        Assertions.assertEquals("https://example.org/people/0000-0000-0001-1234", ms.getCreatorId().get(0));
        Assertions.assertEquals("https://example.com/people/0000-0000-0002-5678", ms.getCreatorId().get(1));
        Assertions.assertEquals("O2C set", ms.getMappingSetTitle());
        Assertions.assertEquals(LocalDate.of(2023, 9, 13), ms.getPublicationDate());

        Assertions.assertNotNull(ms.getMappings());
        Assertions.assertEquals(8, ms.getMappings().size());

        Mapping mapping = ms.getMappings().get(0);
        Assertions.assertEquals("https://example.org/entities/0001", mapping.getSubjectId());
        Assertions.assertEquals("alice", mapping.getSubjectLabel());
        Assertions.assertEquals("http://www.w3.org/2004/02/skos/core#closeMatch", mapping.getPredicateId());
        Assertions.assertEquals("https://example.com/entities/0011", mapping.getObjectId());
        Assertions.assertEquals("https://w3id.org/semapv/vocab/ManualMappingCuration",
                mapping.getMappingJustification());
    }

    @Test
    void testReadNonJSONInput() throws IOException, SSSOMFormatException {
        JSONReader reader = new JSONReader("pom.xml");
        Assertions.assertThrows(SSSOMFormatException.class, () -> reader.read());
    }

    @Test
    void testFailOnUndeclaredPrefixes() throws IOException {
        JSONReader reader = new JSONReader("src/test/resources/sets/test-undeclared-prefixes.sssom.json");
        try {
            reader.read();
            Assertions.fail("SSSOMFormatException not thrown for undeclared prefixes");
        } catch ( SSSOMFormatException sfe ) {
            Assertions.assertEquals("Some prefixes are undeclared: ORGPID", sfe.getMessage());
        }
    }

    @Test
    void testFailOnRedefinedBuiltinPrefix() throws IOException {
        JSONReader reader = new JSONReader("src/test/resources/sets/test-redefined-builtin-prefix.sssom.json");
        try {
            reader.read();
            Assertions.fail("SSSOMFormatException not thrown for a redefined built-in prefix");
        } catch ( SSSOMFormatException sfe ) {
            Assertions.assertEquals("Re-defined builtin prefix in the provided curie map", sfe.getMessage());
        }
    }

    @Test
    void testSlotPropagation() throws IOException, SSSOMFormatException {
        JSONReader reader = new JSONReader("src/test/resources/sets/exo2c-with-propagatable-slots.sssom.json");
        MappingSet ms = reader.read();

        for ( Mapping m : ms.getMappings() ) {
            // Set-level mapping provider should be propagated to all mappings
            Assertions.assertEquals("https://example.org/provider", m.getMappingProvider());

            // Set-level mapping tool should NOT be propagated down to mappings, because the
            // set has a mapping_tool column
            Assertions.assertNotEquals("foo mapper", m.getMappingTool());
        }

        // Second mapping has its own mapping tool value
        Assertions.assertEquals("bar mapper", ms.getMappings().get(1).getMappingTool());
    }

    @Test
    void testParsingNonStringValues() throws IOException, SSSOMFormatException {
        JSONReader reader = new JSONReader("src/test/resources/sets/test-non-string-values.sssom.json");
        MappingSet ms = reader.read();

        Assertions.assertEquals(EntityType.OWL_CLASS, ms.getMappings().get(0).getSubjectType());
        Assertions.assertEquals(0.7, ms.getMappings().get(0).getConfidence());
    }
}
